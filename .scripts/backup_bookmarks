#!/home/sreedev/.asdf/shims/ruby
# frozen_string_literal: true

require 'json'

# Generate Bookmark Docs
class DocGenerator
  def init_docs
    docs = "# Sreedev's Web Browser Bookmarks  \n A collection of Programming / Electronics / Mathematics Resource Links & Bookmarks curated by Sreedev.  \n"
    docs += "![network-binary-binary-code-web-wallpaper-preview](https://user-images.githubusercontent.com/36154121/137835458-31e023c0-9960-4daf-8106-33e78c445c9a.jpg)  \n"
    docs += "This README was automatically generated by [script](https://github.com/sreedevk/dot/blob/master/.scripts/backup_bookmarks)  \n"

    bookmarks_file = File.open("#{`echo ~`.strip}/.config/BraveSoftware/Brave-Browser/Default/Bookmarks", 'r')
    bookmarks = JSON.parse(bookmarks_file.read)['roots']
    bookmarks_file.close

    [bookmarks, docs]
  end

  def gen_docs(bookmarks, documentation, level = 1)
    return documentation if skip_doc?(bookmarks)

    documentation += generate_title(bookmarks, level)
    return documentation if (bookmarks['children'] || []).empty?

    bookmarks['children'].map do |child|
      documentation = gen_docs(child, documentation, level + 1)
    end

    documentation
  end

  def skip_doc?(bookmarks)
    in_blocklist?(bookmarks['name']) || blocked_pattern?(bookmarks['name']) || blocked_pattern?(bookmarks['url'])
  end

  def in_blocklist?(name)
    %w[tunecore TL radio apps].include?(name)
  end

  def blocked_pattern?(name)
    !name.to_s.match(/(pdf|google|file\:)/).nil?
  end

  def generate_title(bookmarks, level)
    base = ' ' * level
    return "#{base} #{'#' * level} #{bookmarks['name']}\n" if bookmarks['url'].nil?

    base + "[#{bookmarks['name']}](#{bookmarks['url']})  \n"
  end

  def write_to_disk(bookmarks, docstring)
    # Bookmarks
    bookmarks_file = File.open("#{`echo ~`.strip}/.bookmarks/marks", 'w+')
    bookmarks_file.write("#{JSON.pretty_generate(bookmarks)}\n")
    bookmarks_file.close
    # Docs
    docsfile = File.open("#{`echo ~`.strip}/.bookmarks/README.md", 'w+')
    docsfile.write(docstring)
    docsfile.close
  end
end

dg              = DocGenerator.new
bookmarks, docs = dg.init_docs
docs            = dg.gen_docs(bookmarks['bookmark_bar'], docs)
docs            = dg.gen_docs(bookmarks['other'], docs)
docs            = dg.gen_docs(bookmarks['synced'], docs)
dg.write_to_disk(bookmarks, docs)

puts system("cd ~/.bookmarks && git add . && git commit -m 'updated bookmarks' && git push origin main && cd -")
