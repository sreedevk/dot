# TITLE: Zsh Functions
# AUTHOR: Sreedev Kodichath

# move files to trash instead of removing
trash(){
  mv $1 ~/.trash/
}

# generate app from template
create_app(){
  # template sources
  templates_container="$HOME/Templates"
  declare -A template_remote_source
  template_remote_source[svelte]="git@github.com:sveltejs/template.git"
  template_remote_source[esp]="git@github.com:espressif/esp-idf-template.git"
  template_remote_source[express]="https://github.com/sahat/hackathon-starter.git"

  # app specific inputs
  app_stack=$1
  app_name=$2
  local_app_path="$(pwd)/$app_name"

  # clone template repo locally
  local_template_path="$templates_container/${app_stack}_template"
  [ ! -d $templates_container ] && mkdir $templates_container
  [ ! -d $local_template_path   ] && git clone $template_remote_source[$app_stack] $local_template_path

  # copy template to current directory
  cp -r $local_template_path $local_app_path

  # post processing
  rm -rf $local_app_path/.git
  git init $local_app_path
}

# beautiful CSVs
csv() {
  column -s, -t < $1 | less -$2 -N -S
}

# process filter & kill
pk(){
  sudo kill -9 $(ps aux | fzf | awk '{print $2}')
}

# print terminal emulator color palette
palette() {
    local -a colors
    for i in {000..255}; do
        colors+=("%F{$i}$i%f")
    done
    print -cP $colors
}

# compile plugins after change in .zsh_plugins
antibody-compile(){
  antibody bundle < ~/.zsh/.zsh_plugins > ~/.zsh/.zsh_plugins.sh
}

# filter & kill active tmux sessions
tmux-kill(){
  tmux list-sessions | awk 'BEGIN{FS=":"}{print $1}' | fzf | xargs -n 1 tmux kill-session -t
}

# change directories in style
lfcd () {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

# ix.io pastebin
ix() {
    local opts
    local OPTIND
    [ -f "$HOME/.netrc" ] && opts='-n'
    while getopts ":hd:i:n:" x; do
        case $x in
            h) echo "ix [-d ID] [-i ID] [-n N] [opts]"; return;;
            d) $echo curl $opts -X DELETE ix.io/$OPTARG; return;;
            i) opts="$opts -X PUT"; local id="$OPTARG";;
            n) opts="$opts -F read:1=$OPTARG";;
        esac
    done
    shift $(($OPTIND - 1))
    [ -t 0 ] && {
        local filename="$1"
        shift
        [ "$filename" ] && {
            curl $opts -F f:1=@"$filename" $* ix.io/$id
            return
        }
        echo "^C to cancel, ^D to send."
    }
    curl $opts -F f:1='<-' $* ix.io/$id
}

# Time Elsewhere
zonetime(){
  echo "$(timedatectl list-timezones)" | fzf | read TZ
  echo "$TZ : $(date +'%m/%d/%Y %I:%M %p')"
  unset TZ
}

# Fast Clear
clear(){
  echo -en "\x1b[2J\x1b[1;1H"
}

# Stream Xorg Session Over SSH & Render on Xephyr
sshx11(){
  nohup Xephyr -br -ac -noreset -screen 1920x1080 :1 >/dev/null 2>&1 &
  DISPLAY=:1 ssh -Y $@ i3
}

# Start & Detach Process
detach-proc(){
  nohup $1 >/dev/null 2>&1 &
}

# Espressif ESP-IDF Initialization
init-idf() {
  echo "Initializing ESP-IDF (ESPRESSIF)"
  export ADF_PATH=~/esp/esp-adf
  export IDF_PATH=~/esp/esp-idf
  . $IDF_PATH/export.sh
}

# Find Keycode
keycode() {
  xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
}

# disable NMI Watchdog
disable_nmi_watchdog() {
  sudo sysctl kernel.nmi_watchdog=0
}

# APL Keyboard - Alt + Key
init-apl() {
  setxkbmap -layout us,apl -variant ,dyalog -option grp:switch
}

firefox-gpu() {
  Exec=MOZ_X11_EGL=1 prime-run /usr/lib/firefox/firefox %u
}

tcm_ip() {
  VBoxManage guestproperty enumerate tcm | grep IP | awk '{print $4}' | sed 's/\,$//' | head -n1
}

tcm() {
  ssh virtdev@$(tcm_ip)
}
